spring 生命周期:
    首先会调用prepareBeanFactory 方法准备工厂
    然后调用invokeBeanFactoryPostProcessors 方法,解析我们的配置类 变成beandefinition放入map中
    然后会注册后置处理器 registerBeanPostProcessors
    然后开始实例化我们的单例bean{
        在这个过程中,会在9个地方分别执行共五个后置处理器
            InstantiationAwareBeanPostProcessor接口继承了BeanPostProcessor接口,它内部提供了三个方法,
            分别是postProcessBeforeInstantiation,  postProcessAfterInstantiation,  postProcessProperties 方法,
            再加上BeanPostProcessor的两个方法 postProcessBeforeInitialization,  postProcessAfterInitialization,
            所以实现这接口有五个方法可以实现,InstantiationAwareBeanPostProcessor接口主要作用于目标对象实例化过程中老板娘处理的事情,
            包括实例化对象的前后过程及实例化属性设置
        一,InstantiationAwareBeanPostProcessor
          1.postProcessBeforeInstantiation方法
            此方法在目标对象实例化之前调用,方法返回值类型为Object,们可以返回任意类型的值, 由于这个时候目标对象还末实例化,所以这个返回值
            可以用来代替原本该生成的目标对象的实例(一般为代理对象), 如果该方法的返回值代替原来该生成的目标对象, 后续只有
            postProcessorAfterInitialization会调用,其它方法不再调用; 否,则按正常的流程走.
          2.postProcessAfterInstantiation方法
            方法在目标对象的实例化之后调用,这个时候对象已经被实例化,但是该对象的属性还未被设置,都是null
            该方法的返回值类型为boolean,如果返回值为false,则忽略属性设置;如果为true,会按照正常流程设置属性值
            并且方法不管postProcessBeforeInstantiation的返回值是什么都会执行
          3.方法对属性值进修改(这个时候属性值还末被设置,但是我们可以修改原本该设置进去的属性值),
            如果postProcessAfterInstantiation方法返回false,该方法不会被调用, 可以在该方法内对属性进行修改
          4.postProcessBeforeInitialization方法 & postProcessAfterInitialization方法
            这两个方法都是在目标被实例化之后,并且属性也被设置之后调用的

        二、SmartInstantiationAwareBeanPostProcessor
          智能实例化Bean后置处理器（继承InstantiationAwareBeanPostProcessor）
          1、determineCandidateConstructors
          检测Bean的构造器，可以检测出多个候选构造器
          2、getEarlyBeanReference
          循环引用的后置处理器，这个东西比较复杂， 获得提前暴露的bean引用。主要用于解决循环引用的问题，只有单例对象才会调用此方法
          3、predictBeanType
          预测bean的类型
        三、MergedBeanDefinitionPostProcessor
          1、postProcessMergedBeanDefinition
          缓存bean的注入信息的后置处理器，仅仅是缓存或者干脆叫做查找更加合适，没有完成注入，注入是另外一个后置处理器的作用

       九次调用的顺序为:
            1,InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation方法
            2,SmartInstantiationAwareBeanPostProcessor的determineCandidateConstructors方法
            3,MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition方法
            4,SmartInstantiationAwareBeanPostProcessor的getEarlyBeanReference方法
            5,InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation方法
            6,postProcessAfterInstantiation的postProcessProperties方法
            7,BeanPostProcessor的postProcessBeforeInitialization方法
            8,BeanPostProcessor的postProcessAfterInitialization方法
            9,bean销毁的后置处理器  DestructionAwareBeanPostProcessor
    }

